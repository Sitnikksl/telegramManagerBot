import fetch from "node-fetch";
import TelegramApi from "node-telegram-bot-api";
//const { options } = require('nodemon/lib/config')
//const command = require('nodemon/lib/config/command')
const token = '5533043131:AAGVDRGDqRXehNfULaMJyEnW_Aea8z8syGk'
const bot = new TelegramApi(token, {polling: true})


let time = null;
let vacationList = '';
let todayMounth;
let today = '';
let startDay = '';
let endDay = '';

const getMounth = () =>{
    todayMounth = new Date().toLocaleDateString();
    for(let char of todayMounth){
        if(char === '/'){
            break;
        }
        today += char;
    }
    return today;
}
getMounth();
const req = () =>{
    const url = 'https://script.google.com/macros/s/AKfycbzT0D0WAbDIR5WjDi-OrKSH72F05MfA6BH10p14SlUneCIiIc641WVX10BtMV-xfxQzWg/exec';
    const vacationTable = fetch(url).then(response =>response.json()).then(arr =>{
        // console.log(arr.users);
        let userNames = [];
        let userFirstDays = [];
        let userMounth = [];
        for(let i = 0; i<arr.users.length; i++){
            let addName = arr.users[i].Name;
            userNames.push(addName); 
        }
        for(let i = 0; i<arr.users.length; i++){
            let addFirstDay = arr.users[i].FirstDay;
            
            userFirstDays.push(addFirstDay); 
        }
        for(let i = 0; i<arr.users.length; i++){
            let addMounth = arr.users[i].Mounth;
            userMounth.push(addMounth)
        }
        console.log('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ –≤ —Ç–∞–±–ª–∏—Ü–µ: ' + arr.users.length);
        vacationList = '';
        for(let i = 0; i<arr.users.length; i++){
            if(arr.users[i].Mounth.toString().includes(today || today[1])){
                
                for(let char of arr.users[i].FirstDay){
                    if(char === 'T'){
                        break;
                    }
                    startDay+= char;
                }
                for(let char of arr.users[i].LastDay){
                    if(char === 'T'){
                        break;
                    }
                    endDay+= char;
                }
                vacationList += 'üìå' + arr.users[i].Name + '\n' 
                + '–ù–∞—á–∞–ª–æ: ' + startDay + '\n' 
                + '–û–∫–æ–Ω—á–∞–Ω–∏–µ: ' + endDay + '\n' 
                + '–í—Å–µ–≥–æ –¥–Ω–µ–π: ' + arr.users[i].CountDay +'\n'+'\n';
                startDay = '';
                endDay = '';
            }
        }
    });
}

setInterval(() => {
    req();
}, 1000);

const start = () =>{

    bot.setMyCommands([
        {command: '/start', description: '–ö–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ä—Ç–∞'},
        {command: '/info', description: '–£–∑–Ω–∞—Ç—å —á—Ç–æ –º–æ–∂–Ω–æ'},
        {command: '/links', description: '–ü–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏'},
        {command: '/vacation', description: '–û—Ç–ø—É—Å–∫–∏ –º–µ—Å—è—Ü–∞'}
    ])
    
    bot.on('message', async msg=>{
        const text = msg.text;
        const chatId = msg.chat.id;
        
        setInterval(() => {
            time = new Date().toLocaleTimeString()
            console.log(time);
            if(time === '9:00:00 AM'){
                bot.sendMessage(chatId, vacationList);
            }
            }, 10000);

        if(text === '/start'){
           await bot.sendMessage(chatId, '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –≠—Ç–æ –º–µ–Ω–µ–¥–∂–µ—Ä—Å–∫–∏–π –±–æ—Ç, —Å –ø–æ–º–æ—â—å—é –∫–æ—Ç–æ—Ä–æ–≥–æ —Ç—ã —Å–º–æ–∂–µ—à—å –¥–µ–ª–∞—Ç—å –º–Ω–æ–≥–æ –∫–ª–µ–≤—ã—Ö –∏ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ã—Ö –≤–µ—â–µ–π!');
           await bot.sendSticker(chatId, 'https://tlgrm.ru/_/stickers/5a7/cb3/5a7cb3d0-bca6-3459-a3f0-5745d95d54b7/1.webp');
           return bot.sendMessage(chatId, '–ê —Ç–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏: /info –∏ —É–∑–Ω–∞–π –∫–∞–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã –º–æ–∂–Ω–æ –≤—ã–ø–æ–ª–Ω—è—Ç—å üòÄ');
        } else  
    
        if(text === '/name'){
            await bot.sendMessage(chatId, '–¢–µ–±—è –∑–æ–≤—É—Ç: ' + msg.from.first_name +  ' ' + msg.from.last_name);
            if (msg.from.last_name === undefined){
                bot.sendMessage(chatId, '–ê –≥–¥–µ —Ñ–∞–º–∏–ª–∏—è?')
            }
        } else

        if(text === '/info'){
            await bot.sendMessage(chatId, '–í—Å—ë –º–æ–∂–Ω–æ, –Ω–∏—Ö—É—è –Ω–µ–ª—å–∑—è!' + '\n' + '¬© –õ—ë—Ö–∞ –ü–∞–Ω–∞—Å—é–∫')
            //return bot.sendMessage(chatId, '[inline URL](http://www.example.com/)', {parse_mode: 'Markdown'})
            await bot.sendMessage(chatId, '/links ‚Äì –ø–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏' + '\n' + 
            '/vacation - –æ—Ç–ø—É—Å–∫–∏ –º–µ—Å—è—Ü–∞')
        } else

        if(text === '/links'){
            await bot.sendMessage(chatId,  '–ü–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏: ' + '\n' + '[üìå –î–∞—à–±–æ—Ä–¥ —Ä–µ–Ω—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç–∏](https://docs.google.com/spreadsheets/d/1zacVstpRrZw4A-gIHL1V5uoax27O9-wZDfMnHuThUKs/edit?usp=sharing)' + 
            '\n' + '[üìå –ú–µ–Ω–µ–¥–∂–µ—Ä—Å–∫–∏–π Notion](http://www.example.com/)' + '\n' + 
            '[üìå –î–æ—Å–∫–∞ Project Managment](http://www.example.com/)', {parse_mode: 'Markdown'})
        
        } else
        if(text === '/vacation'){            
            bot.sendMessage(chatId, 'ü™¥ –û—Ç–ø—É—Å–∫–∏ –≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ: ' + '\n' + '\n' + vacationList + '\n')
        } else
        if(text === '/id'){
            bot.sendMessage(chatId, chatId)
        }
        else{
            return bot.sendMessage(chatId, '–Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é —á—Ç–æ –∑–Ω–∞—á–∏—Ç ' + ' "' + text + '", ' + '–¥–∞–≤–∞–π –µ—â—ë —Ä–∞–∑!');
        }
    })

} 
start ()   