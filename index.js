const TelegramApi = require('node-telegram-bot-api')
const { options } = require('nodemon/lib/config')
const command = require('nodemon/lib/config/command')
const token = '5382418564:AAFTOBZyq4UFUCpwBRPVGxrxdkOFeOvEcKE'

const bot = new TelegramApi(token, {polling: true})

/*
const linksButtons = {
    reply_markup: JSON.stringify({
        inline_keyboard: [
            [{text: '–†–µ–Ω—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç—å', callback_data: profitLink}, {text: 'Notion', callback_data: '2 '}],
            [{text: '–†–µ–Ω—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç—å', callback_data: '1 '}, {text: 'Notion', callback_data: '2 '}]
        ]
    })
}
*/

const start = () =>{

    bot.setMyCommands([
        {command: '/start', description: '–ö–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ä—Ç–∞'},
        {command: '/info', description: '–£–∑–Ω–∞—Ç—å —á—Ç–æ –º–æ–∂–Ω–æ'},
        {command: '/links', description: '–ü–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏'},
        {command: '/vacation', description: '–û—Ç–ø—É—Å–∫–∏ –º–µ—Å—è—Ü–∞'}
    ])
    
    bot.on('message', async msg=>{
        const text = msg.text;
        const chatId = msg.chat.id;
        
        if(text === '/start'){
           await bot.sendMessage(chatId, '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –≠—Ç–æ –º–µ–Ω–µ–¥–∂–µ—Ä—Å–∫–∏–π –±–æ—Ç, —Å –ø–æ–º–æ—â—å—é –∫–æ—Ç–æ—Ä–æ–≥–æ —Ç—ã —Å–º–æ–∂–µ—à—å –¥–µ–ª–∞—Ç—å –º–Ω–æ–≥–æ –∫–ª–µ–≤—ã—Ö –∏ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ã—Ö –≤–µ—â–µ–π!');
           await bot.sendSticker(chatId, 'https://tlgrm.ru/_/stickers/5a7/cb3/5a7cb3d0-bca6-3459-a3f0-5745d95d54b7/1.webp');
           return bot.sendMessage(chatId, '–ê —Ç–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏: /info –∏ —É–∑–Ω–∞–π –∫–∞–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã –º–æ–∂–Ω–æ –≤—ã–ø–æ–ª–Ω—è—Ç—å üòÄ');
        } else  
    
        if(text === '/name'){
            await bot.sendMessage(chatId, '–¢–µ–±—è –∑–æ–≤—É—Ç: ' + msg.from.first_name +  ' ' + msg.from.last_name);
            if (msg.from.last_name === undefined){
                bot.sendMessage(chatId, '–ê –≥–¥–µ —Ñ–∞–º–∏–ª–∏—è?')
            }
        } else

        if(text === '/info'){
            await bot.sendMessage(chatId, '–í—Å—ë –º–æ–∂–Ω–æ, –Ω–∏—Ö—É—è –Ω–µ–ª—å–∑—è!' + '\n' + '¬© –õ—ë—Ö–∞ –ü–∞–Ω–∞—Å—é–∫')
            //return bot.sendMessage(chatId, '[inline URL](http://www.example.com/)', {parse_mode: 'Markdown'})
            await bot.sendMessage(chatId, '/links ‚Äì –ø–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏' + '\n' + 
            '/vacation - –æ—Ç–ø—É—Å–∫–∏ –º–µ—Å—è—Ü–∞')
        } else

        if(text === '/links'){
            await bot.sendMessage(chatId,  '–ü–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏: ' + '\n' + '[üìå –î–∞—à–±–æ—Ä–¥ —Ä–µ–Ω—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç–∏](https://docs.google.com/spreadsheets/d/1zacVstpRrZw4A-gIHL1V5uoax27O9-wZDfMnHuThUKs/edit?usp=sharing)' + 
            '\n' + '[üìå –ú–µ–Ω–µ–¥–∂–µ—Ä—Å–∫–∏–π Notion](http://www.example.com/)' + '\n' + 
            '[üìå –î–æ—Å–∫–∞ Project Managment](http://www.example.com/)', {parse_mode: 'Markdown'})
        
        } else
        if(text === '/vacation'){
            bot.sendMessage(chatId, '–¢—É—Ç —è –Ω–∞–ø–∏—à—É —Ç–µ–±–µ –æ—Ç–ø—É—Å–∫–∏')
        } else
        if(text === '/id'){
            bot.sendMessage(chatId, chatId)
        }
        else{
            return bot.sendMessage(chatId, '–Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é —á—Ç–æ –∑–Ω–∞—á–∏—Ç ' + ' "' + text + '", ' + '–¥–∞–≤–∞–π –µ—â—ë —Ä–∞–∑!');
        }
    })

} 
start ()